datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PlanTier {
  FREE
  PRO
  ENTERPRISE
}

enum PlanInterval {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

model User {
  id               String         @id @map("uid")
  email            String?
  plan             String?
  stripeCustomerId String?        @map("stripe_customer_id")
  notifications    UserNotification?
  subscriptions    Subscription[]
  websites         Website[]
  websiteTransfers WebsiteTransfer[]
}

model Website {
  id                    String              @id @default(uuid())
  domain                String
  uid                   String
  updatedAt             DateTime?           @updatedAt @map("updated_at")
  initialPluginInstalled Boolean?           @default(false) @map("initial_plugin_installed")
  user                  User                @relation(fields: [uid], references: [id])
  websiteData           WebsiteData[]
  insights              Insight[]
  recommendedActions    RecommendedAction[]
  websiteTransfers      WebsiteTransfer[]

  @@unique([domain, uid])
}

model WebsiteData {
  id               String    @id @default(uuid())
  websiteId        String    @map("website_id")
  wpcoreLayer      Json?     @map("wpcore_layer")
  filesystemLayer  Json?     @map("filesystem_layer")
  applicationLayer Json?     @map("application_layer")
  networkLayer     Json?     @map("network_layer")
  wpInfo           Json?     @map("wp_info")
  networkStatus    Json?     @map("network_status")
  fetchedAt        DateTime  @default(now()) @map("fetched_at") @db.Timestamptz
  website          Website   @relation(fields: [websiteId], references: [id])
}

model Insight {
  id          String    @id @default(uuid())
  websiteId   String    @map("website_id")
  metadata    Json      @default("{}") @db.JsonB
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  expiresAt   DateTime? @map("expires_at") @db.Timestamptz
  severity    String    @db.VarChar(20)
  layer       String    @db.VarChar(50)
  type        String    @db.VarChar(50)
  title       String
  description String
  website     Website   @relation(fields: [websiteId], references: [id])
}

model RecommendedAction {
  id          String    @id @default(uuid())
  websiteId   String    @map("website_id")
  layerType   String    @map("layer_type") @db.VarChar(50)
  actionId    String    @map("action_id") @db.VarChar(255)
  title       String    @db.VarChar(255)
  description String
  severity    String    @db.VarChar(50)
  isLink      Boolean?  @default(false) @map("is_link")
  isApplied   Boolean?  @default(false) @map("is_applied")
  href        String?   @db.VarChar(1024)
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  website     Website   @relation(fields: [websiteId], references: [id])
}

model UserNotification {
  uid                String    @id
  urgentAlerts       Boolean?  @default(true) @map("urgent_alerts")
  insights           Boolean?  @default(true)
  recommendedActions Boolean?  @default(true) @map("recommended_actions")
  createdAt          DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  user               User      @relation(fields: [uid], references: [id])
}

model WebsiteTransfer {
  id        String    @id @default(uuid())
  websiteId String    @map("website_id")
  uid       String
  domain    String
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  website   Website   @relation(fields: [websiteId], references: [id])
  user      User     @relation(fields: [uid], references: [id])
}

model Plan {
  id            String        @id @db.VarChar(50)
  name          String        @db.VarChar(100)
  tier          PlanTier
  interval      PlanInterval?
  stripePriceId String?       @map("stripe_price_id") @db.VarChar(255)
  active        Boolean       @default(true)
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz
  subscriptions Subscription[]
}

model Subscription {
  id                  String             @id @default(uuid())
  userId              String             @map("user_id") @db.VarChar(255)
  planId              String             @map("plan_id") @db.VarChar(50)
  status              SubscriptionStatus
  stripeSubscriptionId String?            @map("stripe_subscription_id") @db.VarChar(255)
  currentPeriodStart  DateTime?          @map("current_period_start") @db.Timestamptz
  currentPeriodEnd    DateTime?          @map("current_period_end") @db.Timestamptz
  cancelAtPeriodEnd   Boolean            @default(false) @map("cancel_at_period_end")
  canceledAt          DateTime?          @map("canceled_at") @db.Timestamptz
  endedAt             DateTime?          @map("ended_at") @db.Timestamptz
  trialEndsAt         DateTime?          @map("trial_ends_at") @db.Timestamptz
  createdAt           DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  user                User               @relation(fields: [userId], references: [id])
  plan                Plan               @relation(fields: [planId], references: [id])
}
